//===== Type ========================================

@mixin unify-parent($child) {
    @at-root #{selector-unify(&, $child)} {
      @content;
    }
  }

//===== Border radius ===============================
@mixin border-radius($radius: $border-radius) {
      border-radius: $radius;
  }

@mixin border-top-radius($radius: $border-radius) {
    border-top-left-radius: $radius;
    border-top-right-radius: $radius;
}

@mixin border-right-radius($radius: $border-radius) {    
    border-top-right-radius: $radius;
    border-bottom-right-radius: $radius;
}

@mixin border-bottom-radius($radius: $border-radius) {
    border-bottom-left-radius: $radius;
    border-bottom-right-radius: $radius;
}

@mixin border-left-radius($radius: $border-radius) {    
    border-top-left-radius: $radius;
    border-bottom-left-radius: $radius;
}

//===== Reset =======================================
@mixin button-reset() {
    appearance: none;
    box-shadow: none;
    border-radius: 0;
    border: none;
    cursor: pointer;
    background-color: transparent;
    outline: none  !important;
    margin: 0;
    padding: 0;
}

@mixin input-reset() {
	border: 0;
	background-color: transparent;
    outline: none !important;
	box-shadow: none;
    border-radius: 0;
}

//===== Position =====================================
// @include position(fixed, 0, n, n, 0);
// -> position: fixed;
//    top: 0;
//    left: 0;

@mixin position($def: relative, $t: n, $r: n, $b: n, $l: n){
    @if $def == absolute {
        position: absolute;
    } @else if $def == fixed {
        position: fixed;
    } @else {
        position: relative;
    }
    @if $t != n { top: $t; }
    @if $r != n { right: $r };
    @if $b != n { bottom: $b };
    @if $l != n { left: $l };
}

@mixin opacity($value) {
    $IEValue: $value*100;
    opacity: $value;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity="+$IEValue+")";
    filter: alpha(opacity=$IEValue);
}

@mixin box-shadow($top: 0, $left: 3px, $blur: 5px, $alpha: 0.5, $inset: false) {
    @if $inset {
        -webkit-box-shadow: inset $top $left $blur rgba(0, 0, 0, $alpha);
        -moz-box-shadow: inset $top $left $blur rgba(0, 0, 0, $alpha);
        box-shadow: inset $top $left $blur rgba(0, 0, 0, $alpha);
    }

    @else {
        -webkit-box-shadow: $top $left $blur rgba(0, 0, 0, $alpha);
        -moz-box-shadow: $top $left $blur rgba(0, 0, 0, $alpha);
        box-shadow: $top $left $blur rgba(0, 0, 0, $alpha);
    }
}

@mixin moving($element: 100%, $time: 200ms, $ease: ease-out) {
    -webkit-transition: $element $time $ease;
    -moz-transition: $element $time $ease;
    -o-transition: $element $time $ease;
    -ms-transition: $element $time $ease;
    transition: $element $time $ease;
}

//===== Transitions ===================================
@mixin transition($transition...) {
    -webkit-transition: $transition;
         -o-transition: $transition;
            transition: $transition;
  }
  @mixin transition-property($transition-property...) {
    -webkit-transition-property: $transition-property;
            transition-property: $transition-property;
  }
  @mixin transition-delay($transition-delay) {
    -webkit-transition-delay: $transition-delay;
            transition-delay: $transition-delay;
  }
  @mixin transition-duration($transition-duration...) {
    -webkit-transition-duration: $transition-duration;
            transition-duration: $transition-duration;
  }
  @mixin transition-timing-function($timing-function) {
    -webkit-transition-timing-function: $timing-function;
            transition-timing-function: $timing-function;
  }
  @mixin transition-transform($transition...) {
    -webkit-transition: -webkit-transform $transition;
       -moz-transition: -moz-transform $transition;
         -o-transition: -o-transform $transition;
            transition: transform $transition;
  }

@mixin cell-width($width: 100px) {
    flex: 0 0 $width;
    max-width: $width;
}

// ===== form ======================================

@mixin placeholder($color: $input-placeholder-color) {
    &::placeholder {
        color: $color;
        opacity: 1;
    }
}

@mixin component-disabled($opacity: $component-disabled) {
    pointer-events: none;
    @include opacity($opacity);
}

@mixin scroll-space($space) {
    margin-right: calc((#{$space} - 1px)* -1);
    padding-right: calc(#{$space} - 1px);
}



